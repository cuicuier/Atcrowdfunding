<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.cui.atcrowdfunding.manager.dao.UserMapper" >
  <resultMap id="BaseResultMap" type="com.cui.atcrowdfunding.bean.User" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="loginacct" property="loginacct" jdbcType="VARCHAR" />
    <result column="userpswd" property="userpswd" jdbcType="CHAR" />
    <result column="username" property="username" jdbcType="VARCHAR" />
    <result column="email" property="email" jdbcType="VARCHAR" />
    <result column="createtime" property="createtime" jdbcType="CHAR" />
  </resultMap>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from t_user
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.cui.atcrowdfunding.bean.User" useGeneratedKeys="true" keyProperty="id">
    insert into t_user (id, loginacct, userpswd, 
      username, email, createtime
      )
    values (#{id,jdbcType=INTEGER}, #{loginacct,jdbcType=VARCHAR}, #{userpswd,jdbcType=CHAR}, 
      #{username,jdbcType=VARCHAR}, #{email,jdbcType=VARCHAR}, #{createtime,jdbcType=CHAR}
      )
  </insert>
  <update id="updateByPrimaryKey" parameterType="com.cui.atcrowdfunding.bean.User" >
    update t_user
    set loginacct = #{loginacct,jdbcType=VARCHAR},
      username = #{username,jdbcType=VARCHAR},
      email = #{email,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select id, loginacct, userpswd, username, email, createtime
    from t_user
    where id = #{id,jdbcType=INTEGER}
  </select>
  <select id="selectAll" resultMap="BaseResultMap" >
    select id, loginacct, userpswd, username, email, createtime
    from t_user
  </select>

  <select id="queryUserLogin" parameterType="map" resultMap="BaseResultMap">
    select id, loginacct, userpswd, username, email, createtime
    from t_user where loginacct=#{loginacct} and userpswd=#{userpswd}
  </select>
  
  <!--<select id="queryList" resultMap="BaseResultMap">
    select id, loginacct, userpswd, username, email, createtime
    from t_user limit #{startIndex},#{pagesize}

  </select>

  <select id="queryCount" resultType="int">
    select count(*)
    from t_user
  </select>-->

  <select id="queryList" resultMap="BaseResultMap">
    select id, loginacct, userpswd, username, email, createtime
    from t_user
    <where>
      <if test="queryText!=null">loginacct like concat("%",#{queryText},"%")</if>
    </where>
    limit #{startIndex},#{pagesize}


  </select>

  <select id="queryCount" resultType="int">
    select count(*)
    from t_user
    <where>
      <if test="queryText!=null">loginacct like concat("%",#{queryText},"%")</if>
    </where>
  </select>
  <select id="queryUserById" parameterType="Integer" resultMap="BaseResultMap">
    select id, loginacct, userpswd, username, email, createtime
    from t_user
    where id=#{id}
  </select>

  <!--如果Mapper接口的参数类型为Collection集合，使用 list 获取集合参数-->
  <!--如果Mapper接口的参数类型为Array数组，使用 array 获取集合参数-->

  <delete id="deleteBatchUserByVO" >
    delete from t_user
    where id in
    <foreach collection="datas" open="(" close=")" separator="," item="user">
      #{user.id}
    </foreach>
  </delete>

  <select id="queryAllRole" resultType="Role" >
    select id, name
    from t_role
  </select>

  <select id="queryRoleByUserId" parameterType="int" resultType="int" >
    select roleid
    from t_user_role
    where userid=#{id}
  </select>

  <!--为给定用户分配角色-->
  <insert id="saveUserRole">
    <foreach collection="data.ids" item="roleid" separator=";">
      insert into t_user_role (
      userid,roleid
      )
      values (
      #{userid},#{roleid}
      )
    </foreach>

  </insert>
  <!--为给定用户取消角色-->
  <delete id="deleteUserRole">
    <foreach collection="data.ids" item="roleid" separator=";">
      delete from t_user_role
      where userid=#{userid} and roleid=#{roleid}
    </foreach>

  </delete>

  <!--查询某用户所拥有的许可-->
  <select id="queryPermissionByUserid" parameterType="Integer" resultType="Permission">
    select distinct t_permission.id,t_permission.pid,t_permission.name,t_permission.icon,t_permission.url
    from t_permission,t_role_permission,t_role,t_user_role,t_user
    where
    t_permission.id=t_role_permission.permissionid
    and t_role_permission.roleid=t_role.id
    and t_role.id=t_user_role.roleid
    and t_user_role.userid=t_user.id
    and t_user.id=#{userid}
  </select>
  
</mapper>